---
import HeadCommon from '../components/HeadCommon.astro';
import HeadSEO from '../components/HeadSEO.astro';
import Header from '../components/Header/Header.astro';
import PageContent from '../components/PageContent/PageContent.astro';
import LeftSidebar from '../components/LeftSidebar/LeftSidebar.astro';
import RightSidebar from '../components/RightSidebar/RightSidebar.astro';
import * as CONFIG from '../config';
import type { MarkdownHeading } from 'astro';
import Footer from '../components/Footer/Footer.astro';
import CopyButton from '../components/Common/CopyButton.svelte'

type Props = {
	frontmatter: CONFIG.Frontmatter;
	headings: MarkdownHeading[];
};

const { frontmatter, headings } = Astro.props as Props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const currentPage = Astro.url.pathname;
const currentFile = `src/pages${currentPage.replace(/\/$/, '')}.md`;
const githubEditUrl = `${CONFIG.GITHUB_EDIT_URL}/${currentFile}`;
import { Code } from 'astro/components';
import { FormBuilder } from "svelte-form-builder-pro";


let options = {
    view: "build",
    styling: {
      primaryBackground: "linear-gradient(to top, #d5d4d0 0%, #d5d4d0 1%, #eeeeec 31%, #efeeec 75%, #e9e9e7 100%)",
      propertyPanelHeaderBackground: "black",
      checkboxColor: "success",
      pointerOverComponentBorder: "1px solid black",
      dragNDropHoverBackgroundColor: "#d1ccff",
      dragNDropLeftRightStyle: {
        border: "3px dashed black",
        backgroundColor: "#fafafa",
        borderRadius: "5px",
        height: "32px",
        margin: "10px",
        marginBottom: "10px",
      },
      dragNDropTopBottomStyle: {
        border: "1px dashed black",
        backgroundColor: "#eaeff0",
        borderRadius: "5px",
        height: "16px",
        margin: "10px",
      },
    },
    disabledViews: {
      tools: false,
      render: false,
      settings: false,
    },
    disabledBuildTools: {
      getData: false,
      validateDefinition: false,
      clearCurrentTab: false,
      clearData: false,
    },
    disabledRenderTools: {
      serialize: false,
      validateForm: false,
      resetForm: false,
    },
    customBuildTools: [
      {
        buttonText: "Surprise Me",
        onClick: (params) => {
          return `<marquee>âœ¨ Alive and kicking! âœ¨</marquee>`;
        },
      },
    ],
    customRenderTools: [
      {
        buttonText: "Surprise Me",
        onClick: (params) => {
          return `<a target="_blank" style="margin-left:20px" href="https://www.google.com/search?q=marquee+html">ðŸ¥š</a>`;
        },
      },
    ],
    componentSelectionOptions: {
      defaultPoppedOut: false,
      defaultPoppedOutStyle: {},
    },
    disableDragNDropComponents: false,
    editOnAdd: false,
    allowHtmlLabels: true,
    showLabelMaxWidth: false,
    disableComponents: [],
    disableCategories: ["Internal"],
    disabledHtmlAttributes: ["spellcheck", "id"],
    theComponentImports: [],
    formDefinition: [],
    tabDataAttributes: [
      { label: "Custom 2", name: "custom2", value: true },
      {
        label: "Special Configuration",
        name: "custom9",
        isButton: true,
        tab: "Special",
        buttonHandler: async (e, dataAttribute) => {
          const component = new CustomConfigurator({
            target: document.getElementById("customConfigExampleArea"),
            props: {
              dataAttribute: dataAttribute,
            },
          });
          component.$set({ self: component });
        },
      },
    ],
    confirmRemoveField: false,
    confirmRemoveTab: true,
  };
---

<html dir={frontmatter.dir ?? 'ltr'} lang={frontmatter.lang ?? 'en-us'} class="initial">
	<head>
		<HeadCommon />
		<HeadSEO frontmatter={frontmatter} canonicalUrl={canonicalURL} />
		<title>
			{frontmatter.title ? `${frontmatter.title} ${CONFIG.SITE.title}` : CONFIG.SITE.title}
		</title>
		<style>
			body {
				width: 100%;
				/* display: grid; */
				/* grid-template-rows: var(--theme-navbar-height) 1fr; */
				/* --gutter: 0.5rem; */
				/* --doc-padding: 2rem; */
			}
			

			.layout {
				/* display: flex; */
				flex-direction: column;
				/* justify-content: center; */
			}		
		
		</style>
		<style is:global>
			.layout > * {
				/* width: 100%;
				height: 100%; */
			}

			.mobile-sidebar-toggle {
				overflow: hidden;
			}
			.highlight{
				color: #45ba4b
			}
			.hero{
				background-color: #2b3137;
				color:#fff;
				min-height: 150px;
			}
			.heading{
				text-align: center;
			}
			.subheading{
				padding:20px;
				text-align: center;
			}
			.buttons_pzbO{
				margin-top: 25px;
				display: flex;
				justify-content: center;
				align-items: center;
				gap: 3rem;				
			}
		
			.get-started {
				margin-left: 15px;
				border: 2px solid #45ba4b;
				border-radius: 8px;
				color: #fff;
				font-size: 16px;
				font-weight: 700;
				line-height: 1em;
				padding: 14px 20px;
				text-decoration: none!important;
				text-transform: uppercase;
			}

			.get-started:hover {
				background: #45ba4b;
				color: #2b3137;
			}
			.npm-command{
				border-radius: 3px;
			}
			.copy{

			}
		</style>
	</head>

	<body>
		<Header currentPage={currentPage} />
		<main class="layout">

<h1 class='heading'>Build forms faster.</h1>
<header class="hero hero--primary heroBanner_UJJx">
	<div class="container">
		<!-- <h2 class="hero__title heroTitle_ohkl"><span class="highlight">Svelte Form Builder</span> enables technical and non-technical creators</h2> -->
		<h2 class="subheading">The <span class="highlight">No-Code Form Builder</span> for Svelte JS</h2>
		<div class="buttons_pzbO">
					
			<a class="get-started" href="/en/docs">Get started</a>
					<CopyButton></CopyButton>
			<!-- <button  class="npm-command" onclick="alert ('hi')">
				<kbd>npm i svelte-form-builder-community <span class='copy'><svg viewBox="0 0 24 24" aria-hidden="true" width="22" height="22"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-width="2"><path stroke-linejoin="round" d="M15.5 4H18a2 2 0 0 1 2 2v13a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2.5"></path><path stroke-linejoin="round" d="M8.621 3.515A2 2 0 0 1 10.561 2h2.877a2 2 0 0 1 1.94 1.515L16 6H8l.621-2.485z"></path><path d="M9 12h6M9 16h6"></path></g></svg></span></kbd>
			</button> -->
			
			<!-- <span class="github-btn github-stargazers github-btn-large">
				<a class="gh-btn" href="https://github.com/microsoft/playwright" rel="noopener noreferrer" target="_blank" aria-label="Star microsoft/playwright on GitHub">
					<span class="gh-ico" aria-hidden="true"></span><span class="gh-text">Star</span></a>
					<a class="gh-count" href="https://github.com/microsoft/playwright/stargazers" rel="noopener noreferrer" target="_blank" aria-label="43k+ stargazers on GitHub" style="display:block">43k+</a>
				</span> -->
			</div>
		</div>
	</header>

<FormBuilder options={options} client:load />

			<PageContent frontmatter={frontmatter} headings={headings} githubEditUrl={githubEditUrl}>
				<slot />
			</PageContent>

			<Code code={`let options = {
				view: "build",
				styling: {
				  primaryBackground: "linear-gradient(to top, #d5d4d0 0%, #d5d4d0 1%, #eeeeec 31%, #efeeec 75%, #e9e9e7 100%)",
				  propertyPanelHeaderBackground: "black",
				  checkboxColor: "success",
				  pointerOverComponentBorder: "1px solid black",
				  dragNDropHoverBackgroundColor: "#d1ccff",
				  dragNDropLeftRightStyle: {
					border: "3px dashed black",
					backgroundColor: "#fafafa",
					borderRadius: "5px",
					height: "32px",
					margin: "10px",
					marginBottom: "10px",
				  },
				  dragNDropTopBottomStyle: {
					border: "1px dashed black",
					backgroundColor: "#eaeff0",
					borderRadius: "5px",
					height: "16px",
					margin: "10px",
				  },
				},
				disabledViews: {
				  tools: false,
				  render: false,
				  settings: false,
				},
				disabledBuildTools: {
				  getData: false,
				  validateDefinition: false,
				  clearCurrentTab: false,
				  clearData: false,
				},
				disabledRenderTools: {
				  serialize: false,
				  validateForm: false,
				  resetForm: false,
				},
				customBuildTools: [
				  {
					buttonText: "Surprise Me",
					onClick: (params) => {
					  return "<marquee>? Alive and kicking! ?</marquee>";
					},
				  },
				],
				customRenderTools: [
				  {
					buttonText: "Surprise Me",
					onClick: (params) => {
					  return "<a target="_blank" style="margin-left:20px" href="https://www.google.com/search?q=marquee+html">??</a>";
					},
				  },
				],
				componentSelectionOptions: {
				  defaultPoppedOut: false,
				  defaultPoppedOutStyle: {},
				},
				disableDragNDropComponents: false,
				editOnAdd: false,
				allowHtmlLabels: true,
				showLabelMaxWidth: false,
				disableComponents: [],
				disableCategories: ["Internal"],
				disabledHtmlAttributes: ["spellcheck", "id"],
				theComponentImports: [],
				formDefinition: [],
				tabDataAttributes: [
				  { label: "Custom 2", name: "custom2", value: true },
				  {
					label: "Special Configuration",
					name: "custom9",
					isButton: true,
					tab: "Special",
					buttonHandler: async (e, dataAttribute) => {
					  const component = new CustomConfigurator({
						target: document.getElementById("customConfigExampleArea"),
						props: {
						  dataAttribute: dataAttribute,
						},
					  });
					  component.$set({ self: component });
					},
				  },
				],
				confirmRemoveField: false,
				confirmRemoveTab: true,
			  };`} lang="svelte" />


			<!-- <aside id="grid-left" class="grid-sidebar" title="Site Navigation">
				<LeftSidebar currentPage={currentPage} />
			</aside> -->
			<!-- <div id="grid-main">
			</div> -->
		</main>
		<!-- <Footer path={currentFile} /> -->
	</body>
</html>
